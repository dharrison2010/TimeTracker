@page "/timeentries"
@inject ITimeEntryService TimeEntryService
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>Time Entries</PageTitle>
<h3>Time Entries</h3>

<button class="btn btn-primary mb-2" @onclick="CreateTimeEntry">
    Create Time Entry
</button>

<QuickGrid Items="TimeEntryService.TimeEntries.AsQueryable()">
    <PropertyColumn Property="t => t.Start" />
    <PropertyColumn Property="t => t.End" />
    <PropertyColumn Property="t => GetDuration(t.Start, t.End)" Title="Duration" />
    <PropertyColumn Property="t => t.Project.Name" Title="Project" />
    <TemplateColumn>
        <button class="btn btn-primary"
                onclick="@(() => ShowProject(context.Project.Id))">
            Show Project
        </button>
    </TemplateColumn>
    <TemplateColumn>
        <button class="btn btn-primary"
                onclick="@(() => EditTimeEntry(context.Id))">
            <i class="oi oi-pencil" />
        </button>
    </TemplateColumn>
</QuickGrid>

@if (projectId > 0)
{
    <ProjectDetails ProjectId="projectId" />
}

@code {
    private int projectId = 0;

    protected override async Task OnInitializedAsync()
    {
        await TimeEntryService.GetTimeEntriesByProject(projectId);
        TimeEntryService.OnChange += StateHasChanged;
    }

    private string GetDuration(DateTime? start, DateTime? end)
    {
        if (start != null && end != null)
        {
            var duration = end.Value - start.Value;
            var result = $"{duration.Hours}h {duration.Minutes}m";
            return result;
        }
        return string.Empty;
    }

    private void ShowProject(int id)
    {
        if (projectId == id) return;

        projectId = id;
        StateHasChanged(); // re-render component
    }

    private void CreateTimeEntry()
    {
        NavigationManager.NavigateTo("/timeentry");
    }

    private void EditTimeEntry(int id)
    {
        NavigationManager.NavigateTo($"/timeentry/{id}");
    }

    public void Dispose() =>
        TimeEntryService.OnChange -= StateHasChanged;
}
